{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Week_3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "mount_file_id": "1bMvxjiEJoFAWlnKiRrxedOKKH-cDiS0C",
      "authorship_tag": "ABX9TyPfWNSlFxasA+e56QdKAf0w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RaquelGrosman/BigD/blob/master/Week_3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t6XGXOfzicwU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Libraries imported\n",
        "import numpy.linalg\n",
        "import numpy as np\n",
        "import scipy.integrate\n",
        "import scipy.misc\n",
        "import scipy.special\n",
        "import math\n",
        "import cmath as cm\n",
        "import sympy as sp\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#sensitivity curve - Power Spectra\n",
        "#setting variables \n",
        "f = 215 #set this ne shanges not from paper\n",
        "f0 = 150 #Hz\n",
        "fs = 40 #Hz lower bound freq\n",
        "S0 = (9*10**-46) #Hz -1\n",
        "\n",
        "#defining constants\n",
        "c = 3*10**8\n",
        "G = 6.674*10**-11\n",
        "epsilon = 0.1\n",
        "\n",
        "#the gravitational waves\n",
        "#setting variables\n",
        "SNR = 10\n",
        "m1 = 10**30 * 9.109 * 10**(-31) #arbitrary (solar masses)\n",
        "m2 = 10**30 * 9.109 * 10**(-31)#arbitrary\n",
        "M = m1 + m2\n",
        "q= m2/m1\n",
        "\n",
        "#alpha values\n",
        "tc = 1 #arbitrary\n",
        "phi = 1 #arbitrary\n",
        "eta = (m1*m2)/(M**2)\n",
        "v = (math.pi*M*f)**1/3\n",
        "\n",
        "#setting alpha values\n",
        "alpha = []\n",
        "alpha.append(1)\n",
        "alpha.append(0)\n",
        "\n",
        "parameters = [0, 0, 0, 0]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UtLSIfGqrrAl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Thanks to felix and Szymon; the following functions will be used for the waveforms, \n",
        "## using func_index to pick the type of input\n",
        "\n",
        "def psi_f(f, parameters, func_index):\n",
        "    try:\n",
        "        if func_index == 1:\n",
        "            return psi_f1(f, parameters)\n",
        "        elif func_index == 2:\n",
        "            return psi_f2(f, parameters)\n",
        "        else:\n",
        "            return cause_an_error\n",
        "    except:\n",
        "        print(\"Does NOT exist\")\n",
        "\n",
        "#used for exercies 1, 2 and 3\n",
        "def psi_f1(f, parameters):\n",
        "    phi, tc, M, eta = parameters\n",
        "    v = (np.pi * M * f)**(-1 / 3)\n",
        "    sum_k = 0\n",
        "    for k in range(len(alpha)):\n",
        "        sum_k += alpha[k] * v**k\n",
        "    return 2 * np.pi * f * t - phi - np.pi / 4 + 3 / (128 * eta * v**5) * sum_k\n",
        "\n",
        "#for exercise 4: incluedes resonance frequency/phase shift - uses epsilon instead of phi\n",
        "def psi_f2(f, parameters):\n",
        "    epsilon, tc, M, eta = parameters\n",
        "    f = get_resonance_freq()\n",
        "    v = (np.pi * M * f)**(-1 / 3)\n",
        "    sum_k = 0\n",
        "    for k in range(len(alpha)):\n",
        "        sum_k += alpha[k] * v**k\n",
        "    return 2 * np.pi * f * t - get_phase_shift(epsilon) - np.pi / 4 + 3 / (128 * eta * v**5) * sum_k\n",
        "\n",
        "# using epsilon get k1\n",
        "def get_k1(epsilon):\n",
        "    return (8/(5*(7+3*math.log(epsilon))))\n",
        "\n",
        "#calculating phase shift of g-wave\n",
        "def get_phase_shift(epsilon):\n",
        "    return ((25*np.pi*0.1**2)/(6144/2))*(np.abs(get_k1(epsilon))/(q*(1+q)))\n",
        "\n",
        "#calculating resonance F of black hole\n",
        "def get_resonance_freq():\n",
        "    return ((c**3)/(m1*G))*(1/np.abs(math.log(epsilon)))\n",
        "\n",
        "#find A (integral from low to high f^-7/6)/S(f)df\n",
        "def get_A(freq_list, pds, SNR):\n",
        "    integral = 0\n",
        "    k = 0\n",
        "    for f, s_h in zip(freq_list, pds):\n",
        "        if k < (len(freq_list)-1):\n",
        "            integral += ((f)**(-7 / 6) / s_h)*(freq_list[k+1]-f)\n",
        "            k += 1\n",
        "    return np.sqrt(SNR / 4*abs(integral))\n",
        "\n",
        "#calculate h\n",
        "def get_h_f(A, f, parameters, function_index):\n",
        "    psi = psi_f(f, parameters, function_index)\n",
        "    h_f = A * f**(-7 / 6) * np.exp(1j * psi)\n",
        "    return h_f\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LozV3UdTgJQb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#calling/getting/loading Einstein data\n",
        "#credit to Felix and Szymon, thanks for your guidance\n",
        "\n",
        "def load_EPDS():\n",
        "    try:\n",
        "        file = open('EinsteinPDS')\n",
        "    except:\n",
        "        print(\"No data found\")\n",
        "    string_read = file.read()\n",
        "    arr = list(map(float, string_read.split()))\n",
        "    x_arr = []\n",
        "    y_arr1 = []\n",
        "    y_arr2 = []\n",
        "    y_arr3 = []\n",
        "    for i in range(len(arr)):\n",
        "        if i % 4 == 0:\n",
        "            x_arr.append(arr[i])\n",
        "        if i % 4 == 1:\n",
        "            y_arr1.append(arr[i])\n",
        "        if i % 4 == 2:\n",
        "            y_arr2.append(arr[i])\n",
        "        if i % 4 == 3:\n",
        "            y_arr3.append(arr[i])\n",
        "    plt.plot(x_arr, y_arr1)\n",
        "    plt.plot(x_arr, y_arr2)\n",
        "    plt.plot(x_arr, y_arr3)\n",
        "    plt.yscale('log')\n",
        "    plt.xscale('log')\n",
        "    return x_arr, y_arr3\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a5nyDJwuiNJH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#calling/getting/loading LIGO data\n",
        "def load_LIGO():\n",
        "    try:\n",
        "        file = open('LigoPDS')\n",
        "    except:\n",
        "        print(\"No data found\")\n",
        "    string_read = file.read()\n",
        "    arr = list(map(float, string_read.split()))\n",
        "    x_arr = []\n",
        "    y_arr1 = []\n",
        "    y_arr2 = []\n",
        "    y_arr3 = []\n",
        "    y_arr4 = []\n",
        "    y_arr5 = []\n",
        "    y_arr6 = []\n",
        "    for i in range(len(arr)):\n",
        "        if i % 7 == 0:\n",
        "            x_arr.append(arr[i])\n",
        "        if i % 7 == 1:\n",
        "            y_arr1.append(arr[i])\n",
        "        if i % 7 == 2:\n",
        "            y_arr2.append(arr[i])\n",
        "        if i % 7 == 3:\n",
        "            y_arr3.append(arr[i])\n",
        "        if i % 7 == 4:\n",
        "            y_arr4.append(arr[i])\n",
        "        if i % 7 == 5:\n",
        "            y_arr5.append(arr[i])\n",
        "        if i % 7 == 6:\n",
        "            y_arr6.append(arr[i])\n",
        "    plt.plot(x_arr, y_arr1)\n",
        "    plt.plot(x_arr, y_arr2)\n",
        "    plt.plot(x_arr, y_arr3)\n",
        "    plt.plot(x_arr, y_arr4)\n",
        "    plt.plot(x_arr, y_arr5)\n",
        "    plt.plot(x_arr, y_arr6)\n",
        "    plt.yscale('log')\n",
        "    plt.xscale('log')\n",
        "    return x_arr, y_arr6"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8BotwR1_jICa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#calculates sensitivity curve for initial LIGO\n",
        "def s_h_LIGO(f):\n",
        "    S0 = 9 * 10**(-46)\n",
        "    fs = 40\n",
        "    f0 = 150\n",
        "    x = f / f0\n",
        "    if(f >= fs):\n",
        "        r = S0 * (((4.49 * x)**(-56)) + 0.16 *\n",
        "                   (x**(-4.52)) + 0.52 + (0.32 * (x**2)))\n",
        "    else:\n",
        "        r = 10000000  # if infinity leads to numerical errors\n",
        "    return(r)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U1b68fJkkZ8D",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#calculates sensitivity curve for advanced LIGO\n",
        "def s_h_adv_LIGO(f):\n",
        "    f0 = 215\n",
        "    fs = 20\n",
        "    S0 = 6 * 10**(-49)\n",
        "    x = f / f0\n",
        "    if (f >= fs):\n",
        "        r = S0 * (x**(-4.14) - 5 * x**(-2) +\n",
        "                   ((111 * (1 - x**2 + (x**4) / 2) / (1 + (x**2) / 2))))\n",
        "    else:\n",
        "        r = 10000000  # if infinity leads to numerical errors\n",
        "    return(r)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ueFwgSXu5KmI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#h'\n",
        "def h_der(A, f, i, func_index):\n",
        "  dx = parameters[i]/10 \n",
        "  newP = parameters.copy()\n",
        "  newP[i] = newP[i] + parameters[i]/10\n",
        "  dy = get_h_f(A, f, newP, func_index) - get_h_f(A, f, parameters, func_index)\n",
        "  return dx/dy\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EqStkcep2Zz-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#matrix creation using above created functions\n",
        "def create_fisher_matrix(A, freq_list, pds, func_index):\n",
        "    fisher_matrix = []\n",
        "    for i in range(len(parameters)):\n",
        "        fisher_matrix.append([])\n",
        "        for j in range(len(parameters)):\n",
        "            integral = 0\n",
        "            k = 0\n",
        "            for f, sh in zip(freq_list, pds):\n",
        "                if k < (len(freq_list)-1):\n",
        "                    integral += np.real(h_der(A, f, i, func_index)\n",
        "                                        * np.conj(h_der(A, f, j, func_index)) / sh)*(freq_list[k+1]-f)\n",
        "                    k += 1\n",
        "                # print(integral)\n",
        "            fisher_matrix[-1].append(4*integral)\n",
        "    return(fisher_matrix)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ax0G4vsz2aBj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "#function to plot PDS for LIGO inital and Advanced\n",
        "def graph_s_h(telescope):\n",
        "    graph_array = []\n",
        "    try:\n",
        "        if telescope == 'LIGO':\n",
        "            for i in range(0, 1000):\n",
        "                graph_array.append(np.sqrt(s_h_LIGO(i)))\n",
        "        elif telescope == 'adv_LIGO':\n",
        "            for i in range(0, 1000):\n",
        "                graph_array.append(np.sqrt(s_h_adv_LIGO(i)))\n",
        "        plt.figure()\n",
        "        plt.plot(graph_array)\n",
        "        plt.yscale('log')\n",
        "        plt.xscale('log')\n",
        "        axes = plt.gca()\n",
        "        axes.set_ylim([10**(-24), 10**(-21)])\n",
        "        axes.set_xlim([10**1, 10**3])\n",
        "    except:\n",
        "        print(\"Computation not avaiable\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gYVwPKSF0HN5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# pull and read PDS of advanced ligo and Einstein telescope\n",
        "\n",
        "freq_list, pds = load_LIGO()\n",
        "freq_list_einstein, pds_einstein = load_EPDS()\n",
        "\n",
        "# EPDS is capable of detecting smaller (lower freqency) signals, frequency of 10^1 and less\n",
        "# x-axis does not have the same range!!\n",
        "# LIGO stops measuring accurately around 10^2 and lower\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y-74R94H4dQ2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# parameters are set\n",
        "parameters = [phi, tc, M, eta]\n",
        "# integration to auire A\n",
        "A = get_A(freq_list, pds, SNR)\n",
        "A_einstein = get_A(freq_list_einstein, pds, SNR)\n",
        "\n",
        "print('A of LIGO: ', A)\n",
        "print('A of Einstein Telescope: ', A_einstein)\n",
        "\n",
        "\n",
        "matrix = create_fisher_matrix(A, freq_list, pds, 1)\n",
        "\n",
        "matrix_einstein = create_fisher_matrix(A, freq_list_einstein, pds_einstein, 1)\n",
        "\n",
        "# invert fisher_matrix\n",
        "inverse = np.linalg.inv(matrix)\n",
        "inverse_einstein = np.linalg.inv(matrix_einstein)\n",
        "\n",
        "# extract diagonal and square root\n",
        "diag = np.abs(np.diagonal(inverse))\n",
        "diag_einstein = np.abs(np.diagonal(inverse_einstein))\n",
        "print('Diagonal of LIGO fishermatrix: ', diag)\n",
        "print('Diagonal of Einstein Telescope fishermatrix: ', diag_einstein)\n",
        "std = np.sqrt(diag)\n",
        "std_einstein = np.sqrt(diag_einstein)\n",
        "\n",
        "# Print standard deviation and standard deviation/value\n",
        "print('Standard deviation of LIGO: ', std)\n",
        "print('Standard deviation of Einstein Telescope: ', std_einstein)\n",
        "\n",
        "# Parameters are in the following order: phi, tc, M, eta\n",
        "print('Print values of parameters: ', parameters)\n",
        "print('Percent of LIGO: ', np.divide(std, parameters))\n",
        "print('Percent of Einstein Telescope: ', np.divide(std_einstein, parameters))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pBB-KsLH4daG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#excersise 4 : looking at the quantum black hole - using epsilon\n",
        "\n",
        "parameters = [epsilon, tc, M, eta]\n",
        "# now, a is set via integration\n",
        "A = get_A(freq_list, pds, SNR)\n",
        "A_einstein = get_A(freq_list_einstein, pds, SNR)\n",
        "\n",
        "print('A of LIGO: ', A)\n",
        "print('A of Einstein Telescope: ', A_einstein)\n",
        "\n",
        "matrix = create_fisher_matrix(A, freq_list, pds, 1)\n",
        "\n",
        "matrix_einstein = create_fisher_matrix(A, freq_list_einstein, pds_einstein, 1)\n",
        "\n",
        "# invert fisher_matrix\n",
        "inverse = np.linalg.inv(matrix)\n",
        "inverse_einstein = np.linalg.inv(matrix_einstein)\n",
        "\n",
        "# extract diagonal and square root\n",
        "diag = np.abs(np.diagonal(inverse))\n",
        "diag_einstein = np.abs(np.diagonal(inverse_einstein))\n",
        "print('diagonal of LIGO fishermatrix: ', diag)\n",
        "print('diagonal of Einstein Telescope fishermatrix: ', diag_einstein)\n",
        "std = np.sqrt(diag)\n",
        "std_einstein = np.sqrt(diag_einstein)\n",
        "\n",
        "# Print standard deviation and standard deviation/value\n",
        "print('Standard deviation of LIGO: ',std)\n",
        "print('Standard deviation of Einstein Telescope: ', std_einstein)\n",
        "\n",
        "# parameters are in the following order: epsilon, tc, M, eta\n",
        "print('Print values of parameters: ', parameters)\n",
        "print('Percent of LIGO: ', np.divide(std, parameters))\n",
        "print('Percent of Einstein Telescope: ', np.divide(std_einstein, parameters))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KUXZk3s54kCD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## again super props to Felix and Szymon for this <3\n",
        "### This section will run for quite a while since the fisher matrix has\n",
        "### to be computed many times. It returns the epsilon standard deviation\n",
        "### depending on epsilon itself and the mass ratio (q)\n",
        "\n",
        "parameters = [epsilon, tc, M, eta]\n",
        "\n",
        "A_einstein = get_A(freq_list_einstein, pds, SNR)\n",
        "\n",
        "m1 = 1.4*(1.988*10**30 * 9.109 * 10**(-31)) #Setting mass 1 to be 1.4 solar masses\n",
        "color_plot = []\n",
        "\n",
        "\n",
        "for i in range(0,11):\n",
        "    m_two = ((i+1)*10)*(1.988*10**30 * 9.109 * 10**(-31))\n",
        "    for j in range(0,11):\n",
        "        epsilon = (j*10+1650)/100000\n",
        "        matrix_einstein = create_fisher_matrix(A_einstein, freq_list_einstein, pds_einstein, 2)\n",
        "        inverse_einstein = np.linalg.inv(matrix_einstein)\n",
        "        diag_einstein = np.abs(np.diagonal(inverse_einstein))\n",
        "        std_einstein = np.sqrt(diag_einstein)\n",
        "        color_plot.append(std_einstein[0])\n",
        "    print(\"loop ran\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1fsFglaK4m9b",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#plot\n",
        "#X:epsilon/y:mass ratio; Stdev of epsilon represented by colors: the bright the higher\n",
        "\n",
        "x = np.linspace(-1, 1, 11)\n",
        "y = np.linspace(-1, 1, 11)\n",
        "\n",
        "X, Y = np.meshgrid(x, y)\n",
        "Z = np.array(color_plot).reshape(11,11)\n",
        "plt.pcolor(X, Y, Z)\n",
        "plt.imshow(Z, origin='lower',interpolation='bilinear')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kqal0rDO4okk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#plots inital and adv ligo data - from given fomulas (3.7 and 3.8 from arxiv paper)\n",
        "\n",
        "graph_s_h('LIGO')\n",
        "graph_s_h('adv_LIGO')"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
